<script>  
function allowDrop(ev) {ev.preventDefault();}  
function drag(ev) {ev.dataTransfer.setData("text/html", ev.target.id);}  
function drop(ev) {  
ev.preventDefault();  
var data = ev.dataTransfer.getData("text/html");  
ev.target.appendChild(document.getElementById(data));  
}  
</script>  
<p>Drag the javatpoint image into the rectangle:</p>  
<div id="div1" style="width:350px;height:100px;padding:10px;border:1px solid #aaaaaa;"   
ondrop="drop(event)" ondragover="allowDrop(event)"></div>  
<br>  
<img id="drag1" src="/htmlpages/images/javatpoint.png" alt="javatpoint image"   
draggable="true" ondragstart="drag(event)"/>

EXP - 3 Event Bubling

<!DOCTYPE html>
<html>
<head></head>
    <title>Event Bubbling</title>
    <style>
        body {
            padding: 20px;
            background-color: pink;
        }
        div {
            padding: 20px;
            background-color: green;
            width: max-content;
        }
        span {
            display: block;
            padding: 20px;
            background-color: blue;
        }
    </style>
</head>
<body>
    <div>
        <span>
            <button>Click Me!</button>
        </span>
    </div>
    <script>
        const body = document.getElementsByTagName("body")[0];
        const div = document.getElementsByTagName("div")[0];
        const span = document.getElementsByTagName("span")[0];
        const button = document.getElementsByTagName("button")[0];

        body.addEventListener('click', function () {
            console.log("body was clicked");
        });
        div.addEventListener('click', function () {
            console.log("div was clicked");
        });
        span.addEventListener('click', function () {
            console.log("span was clicked");
        });
        button.addEventListener('click', function () {
            console.log("button was clicked");
        });
    </script>
</body>
</html>



EXP - 4 Calculator

<!DOCTYPE html>
<html>
<head>
    <title>Calculator</title>
    <style>
        table {
            border: 2px solid black;
            width: 400px;
            height: 400px;
            margin-left: auto;
            margin-right: auto;
            background-color: rgb(196, 185, 185);
        }
        input[type="button"] {
            width: 100%;
            font-weight: bold;
            height: 100%;
        }
        input[type="text"] {
            font-size: medium;
            width: 100%;
            height: 100%;
            background-color: rgb(196, 185, 185);
        }
    </style>
</head>
<body>
    <center><h1>Calculator</h1></center>
    <table>
        <tr>
            <td colspan="5"><input type="text" id="res"></td>
        </tr>
        <tr>
            <td><input type="button" value="(" onclick="dis('(')"></td>
            <td><input type="button" value="CE" onclick="dis('CE')"></td>
            <td><input type="button" value=")" onclick="dis(')')"></td>
            <td><input type="button" value="C" onclick="clr()"></td>
        </tr>
        <tr>
            <td><input type="button" value="1" onclick="dis('1')"></td>
            <td><input type="button" value="2" onclick="dis('2')"></td>
            <td><input type="button" value="3" onclick="dis('3')"></td>
            <td><input type="button" value="+" onclick="dis('+')"></td>
        </tr>
        <tr>
            <td><input type="button" value="4" onclick="dis('4')"></td>
            <td><input type="button" value="5" onclick="dis('5')"></td>
            <td><input type="button" value="6" onclick="dis('6')"></td>
            <td><input type="button" value="-" onclick="dis('-')"></td>
        </tr>
        <tr>
            <td><input type="button" value="7" onclick="dis('7')"></td>
            <td><input type="button" value="8" onclick="dis('8')"></td>
            <td><input type="button" value="9" onclick="dis('9')"></td>
            <td><input type="button" value="*" onclick="dis('*')"></td>
        </tr>
        <tr>
            <td><input type="button" value="." onclick="dis('.')"></td>
            <td><input type="button" value="0" onclick="dis('0')"></td>
            <td><input type="button" value="=" onclick="solve()"></td>
            <td><input type="button" value="/" onclick="dis('/')"></td>
        </tr>
    </table>
    <script type="text/javascript">
        function dis(val) {
            document.getElementById("res").value += val;
        }

        function solve() {
            let x = document.getElementById("res").value;
            let y = eval(x);
            document.getElementById("res").value = y;
        }

        function clr() {
            document.getElementById("res").value = "";
        }
    </script>
</body>
</html>



5 . Demonstrate the use of Reduce , Filter , Map

Reduce

const input = [
    ["a", "bp", "c"],
    ["c", "q", "fF"],
    ["d", "nf", "g"],
    1
];

const result = input.flat().reduce((accumulator, currentValue) => {
    if (accumulator[currentValue]) {
        accumulator[currentValue] += 1;
    } else {
        accumulator[currentValue] = 1;
    }
    return accumulator;
}, {});

console.log(result);

Map

const input = [
    { name: "John", age: 13 },
    { name: "Mark", age: 56 },
    { name: "Rachel", age: 45 },
    { name: "Nate", age: 67 },
    { name: "Jennifer", age: 65 }
];

const ages = input.map((person) => person.age);

const result = [
    Math.min(...ages),
    Math.max(...ages),
    Math.max(...ages) - Math.min(...ages)
];

console.log(result);



Filter

const input = [1, -4, 12, 0, -3, 29, -150];

input
filter(function (num) {
return num > 0;
})
educe(function (accumulator, currentValue) {
return accumulator + currentValue;

}, 0);


Exp - 6
6.Create a Class Component for Counter in React JS

import React, { useState } from "react";
// Importing app.css is css file to add styling
import "./App.css";

const App = () => {
    // Counter is a state initialized to 0
    const [counter, setCounter] = useState(0)

    // Function is called everytime increment button is clicked
    const handleClick1 = () => {
        // Counter state is incremented
        setCounter(counter + 1)
    }

    // Function is called everytime decrement button is clicked
    const handleClick2 = () => {
        // Counter state is decremented
        setCounter(counter - 1)
    }

    return (
        <div style={{
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            justifyContent: 'center',
            fontSize: '300%',
            position: 'absolute',
            width: '100%',
            height: '100%',
            top: '-15%',
        }}>
            Counter App
            <div style={{
                fontSize: '120%',
                position: 'relative',
                top: '10vh',
            }}>
                {counter}
            </div>
            <div className="buttons">
                <button style={{
                    fontSize: '60%',
                    position: 'relative',
                    top: '20vh',
                    marginRight: '5px',
                    backgroundColor: 'green',
                    borderRadius: '8%',
                    color: 'white',
                }}
                onClick={handleClick1}>Increment</button>
                <button style={{
                    fontSize: '60%',
                    position: 'relative',
                    top: '20vh',
                    marginLeft: '5px',
                    backgroundColor: 'red',
                    borderRadius: '8%',
                    color: 'white',
                }}
                onClick={handleClick2}>Decrement</button>
            </div>
        </div>
    )
}

export default App

7.Create a Class component for Changing the color of the text given in React JS

import { useState } from 'react';

const App = () => {
    const [isColored, setIsColored] = useState(false);

    return (
        <div>
            <p>
                <span style={{ color: isColored ? 'green' : '' }}>VVITGUNTUR.COM</span>
                Nambur
            </p>
            <button onClick={() => setIsColored(isColored => !isColored)}>
                Toggle isColored
            </button>
        </div>
    );
};

export default App;

8. Component for viewing an array of objects in a tabular form.

import React from "react";
import "./App.css";

function RenderingArrayOfObjects() {
    const studentlist = [
        {
            id: "501",
            name: "Rajesh",
            course: "B.TEch",
        },
        {
            id: "502",
            name: "Venkatesh",
            course: "B.TEch",
        },
        {
            id: "503",
            name: "Ramesh",
            course: "B.TEch",
        },
        {
            id: "504",
            name: "Suresh",
            course: "B.TEch",
        },
        {
            id: "505",
            name: "Kumar",
            course: "B.TEch",
        },
    ];

    const list = studentlist.map((element) => {
        return (
            <tr className="students" align="center" key={element.id}>
                <td>{element.id}</td>
                <td>{element.name}</td>
                <td>{element.course}</td>
            </tr>
        );
    });

    return (
        <div>
            <table align="center" border="1">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>Name</th>
                        <th>Course</th>
                    </tr>
                </thead>
                <tbody>{list}</tbody>
            </table>
        </div>
    );
}

function App() {
    return (
        <div className="App">
            <div>
                <h1 className="Students">Student List</h1>
                <br />
                <RenderingArrayOfObjects />
            </div>
        </div>
    );
}

export default App;



import { useState, useEffect } from 'react';

function App() {
    const [date, setDate] = useState(new Date());

    useEffect(() => {
        const interval = setInterval(() => {
            setDate(new Date());
        }, 1000);
        return () => clearInterval(interval);
    }, []);

    return (
        <p className='DigitalClock'>
            {date.toLocaleTimeString()}
        </p>
    );
}

export default App;

index.css

.DigitalClock {
    text-align: center;
    margin-top: 8rem;
    font-size: 3rem;
    font-weight: bold;
    }






10. Demonstrate useState Hook with the help sample text.

import React, { useState } from 'react';

function Hook() {
    const [count, setCount] = useState(0);

    return (
        <div>
            <p>You clicked {count} times</p>
            <button onClick={() => setCount(count + 1)}>
                Click me
            </button>
        </div>
    );
}

export default Hook;

12. Demonstrate useEffect Hook with necessary example.

import React, { useState, useEffect } from 'react';

const useDocumentTitle = title => {
    useEffect(() => {
        document.title = title;
    }, [title])
}

function CustomCounter() {
    const [count, setCount] = useState(0);
    const incrementCount = () => setCount(count + 1);
    useDocumentTitle(`You clicked ${count} times`);

    return (
        <div>
            <p>You clicked {count} times</p>
            <button onClick={incrementCount}>Click me</button>
        </div>
    )
}

export default CustomCounter;

12. Demonstrate useEffect Hook with necessary example.

import React, { useState, useEffect } from 'react';

const useDocumentTitle = title => {
    useEffect(() => {
        document.title = title;
    }, [title])
}

function CustomCounter() {
    const [count, setCount] = useState(0);
    const incrementCount = () => setCount(count + 1);
    useDocumentTitle(`You clicked ${count} times`);

    return (
        <div>
            <p>You clicked {count} times</p>
            <button onClick={incrementCount}>Click me</button>
        </div>
    )
}

export default CustomCounter;
